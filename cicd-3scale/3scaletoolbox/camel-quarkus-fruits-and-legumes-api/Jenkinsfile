#!groovy

library identifier: '3scale-toolbox-jenkins@master',
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: 'https://github.com/rh-integration/3scale-toolbox-jenkins.git'])

def service = null

pipeline {
    agent {
        node {
            label 'maven'
        }
    }

    parameters{
        string (defaultValue: 'image-registry.openshift-image-registry.svc:5000', name:'IMAGE_REGISTRY', description:'container image registry')
        string (defaultValue: 'rh-dev', name:'IMAGE_NAMESPACE', description:'namespace where image is deployed')
        string (defaultValue: 'rh-dev', name:'DEV_PROJECT', description:'build or development project')
        string (defaultValue: 'rh-test', name:'TEST_PROJECT', description:'Test project')
        string (defaultValue: 'rh-prod', name:'PROD_PROJECT', description:'Production project')
        string (defaultValue: 'https://github.com/jeannyil-rhoam-resources/rhoam-automation.git', name:'GIT_REPO', description:'Git source')
        string (defaultValue: 'main', name:'GIT_BRANCH', description:'Git branch in the source git')
        booleanParam (defaultValue: false, name:'SELECT_DEPLOY_TO_PROD', description:'Approval to deploy to Production (default: no deployment to production)')
    }

    stages {
    
        stage('Checkout Source') {
            steps {
                checkout scm
            }
        }

        stage('3scale Publish API to Test') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == false
                }
            }
            steps {
                script {

                    def envName = params.TEST_PROJECT
                    def app_name= 'camel-quarkus-http'
                    // Using the OpenShift service FQDN
                    // def backend_service = "http://" + app_name + "." + envName + ".svc:8080"
                    // Using the OpenShift route
                    def backend_service = "http://" + app_name + "-" + envName + "." + params.PUBLIC_PRODUCTION_WILDCARD_DOMAIN
                    println "${backend_service} "

                    echo "Prepare 3scale Configuration"
                    service = toolbox.prepareThreescaleService(
                            openapi: [filename: "./cicd-3scale/3scaletoolbox/camel-quarkus-fruits-and-legumes-api/rhoam-oas3.json"],
                            environment: [baseSystemName                : params.API_BASE_SYSTEM_NAME,
                                          privateBaseUrl                : backend_service,
                                          environmentName               : envName,
                                          oidcIssuerEndpoint            : params.OIDC_ISSUER_ENDPOINT,
                                          stagingPublicBaseURL          : "https://" + app_name + "-apip-" + envName + "-" + params.PUBLIC_STAGING_WILDCARD_DOMAIN,
                                          productionPublicBaseURL       : "https://" + app_name + "-apip-" + envName + "." + params.PUBLIC_PRODUCTION_WILDCARD_DOMAIN
                                        ],
                            toolbox: [openshiftProject: params.DEV_PROJECT, 
                                      destination: params.TARGET_INSTANCE,
                                      image: params.TOOLBOX_IMAGE_REGISTRY,
                                      activeDeadlineSeconds: 300,
                                      insecure: params.DISABLE_TLS_VALIDATION == "yes",
                                      secretName: params.SECRET_NAME],
                            service: [:],
                            applicationPlans: [
                                    [ artefactFile: params.BASIC_PLAN_YAML_FILE_PATH ],
                                    [ artefactFile: params.UNLIMITED_PLAN_YAML_FILE_PATH ]
                            ],
                            applications: [
                                    [name: envName, description: "This is used for Test environment integration testing", plan: "fruits-and-legumes-api_basic_plan", account: params.DEVELOPER_ACCOUNT_ID]
                            ]
                    )

                    echo "toolbox version = " + service.toolbox.getToolboxVersion()

                    echo "Import OpenAPI"
                    service.importOpenAPI()
                    echo "Service with system_name ${service.environment.targetSystemName} created !"

                    echo "Create an Application Plan"
                    service.applyApplicationPlans()

                    echo "Create an Application"
                    service.applyApplication()

                    // TODO : create OpenShift routes for the service
                    // oc create route edge camel-quarkus-http-apip-rhpds-3scale-tenant-rh-test-stage-apicast \
                    // --service=apicast-rhpds-3scale-tenant-staging-apicast \
                    // --hostname=camel-quarkus-http-apip-rh-test-staging.apps.jeannyil.sandbox430.opentlc.com \
                    // --port=proxy \
                    // -n 3scale-gw

                    // oc create route edge camel-quarkus-http-apip-rhpds-3scale-tenant-rh-test-prod-apicast \
                    // --service=apicast-3scale-tenant-prod-apicast \
                    // --hostname=camel-quarkus-http-apip-rh-test.apps.jeannyil.sandbox430.opentlc.com \
                    // --port=proxy \
                    // -n 3scale-gw

                    echo "Run integration tests"
                    runIntegrationTests(service)

                    echo "Promote to production"
                    service.promoteToProduction()

                }
            }
        }

        stage('Wait for user to select module to push to production.') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == true
                }
            }
            steps {
                script {
                    try {
                        timeout (time:2, unit:'HOURS') {
                            env.userProdApproval = input(id: 'userInput', message: "Do you approve this build to promote to production?")
                            env.userProdApproval = 'Approved'
                        }
                    } catch (exception) {
                        env.userProdApproval='---'
                    }
                    println("User approval to production " + env.userProdApproval);
                }
            }
        }

        stage('3scale Publish API to Production') {
            when {
                expression {
                    env.userProdApproval == 'Approved'
                }
            }
            steps {
                script {

                    def envName = params.PROD_PROJECT
                    def app_name= 'camel-quarkus-http'
                    // Using the OpenShift service FQDN
                    // def backend_service = "http://" + app_name + "." + envName + ".svc:8080"
                    // Using the OpenShift route
                    def backend_service = "http://" + app_name + "-" + envName + "." + params.PUBLIC_PRODUCTION_WILDCARD_DOMAIN
                    println "${backend_service} "

                    echo "Prepare 3scale Configuration"
                    service = toolbox.prepareThreescaleService(
                            openapi: [filename: "./cicd-3scale/3scaletoolbox/camel-quarkus-fruits-and-legumes-api/rhoam-oas3.json"],
                            environment: [baseSystemName                : params.API_BASE_SYSTEM_NAME,
                                          privateBaseUrl                : backend_service,
                                          environmentName               : envName,
                                          oidcIssuerEndpoint            : params.OIDC_ISSUER_ENDPOINT,
                                          stagingPublicBaseURL          : "https://" + app_name + "-apip-" + envName + "-" + params.PUBLIC_STAGING_WILDCARD_DOMAIN,
                                          productionPublicBaseURL       : "https://" + app_name + "-apip-" + envName + "." + params.PUBLIC_PRODUCTION_WILDCARD_DOMAIN
                                        ],
                            toolbox: [openshiftProject: params.DEV_PROJECT, 
                                      destination: params.TARGET_INSTANCE,
                                      image: params.TOOLBOX_IMAGE_REGISTRY,
                                      activeDeadlineSeconds: 300,
                                      insecure: params.DISABLE_TLS_VALIDATION == "yes",
                                      secretName: params.SECRET_NAME],
                            service: [:],
                            applicationPlans: [
                                    [ artefactFile: params.BASIC_PLAN_YAML_FILE_PATH ],
                                    [ artefactFile: params.UNLIMITED_PLAN_YAML_FILE_PATH ]
                            ],
                            applications: [
                                    [name:envName, description: "This is used for Production environment integration testing", plan: "fruits-and-legumes-api_basic_plan", account: params.DEVELOPER_ACCOUNT_ID]
                            ]
                    )

                    echo "toolbox version = " + service.toolbox.getToolboxVersion()

                    echo "Import OpenAPI"
                    service.importOpenAPI()
                    echo "Service with system_name ${service.environment.targetSystemName} created !"

                    echo "Create an Application Plan"
                    service.applyApplicationPlans()

                    echo "Create an Application"
                    service.applyApplication()

                    // TODO : create OpenShift routes for the service
                    // oc create route edge camel-quarkus-http-apip-rhpds-3scale-tenant-rh-prod-stage-apicast \
                    // --service=apicast-rhpds-3scale-tenant-staging-apicast \
                    // --hostname=camel-quarkus-http-apip-rh-prod-staging.apps.jeannyil.sandbox430.opentlc.com \
                    // --port=proxy \
                    // -n 3scale-gw

                    // oc create route edge camel-quarkus-http-apip-rhpds-3scale-tenant-rh-prod-prod-apicast \
                    // --service=apicast-3scale-tenant-prod-apicast \
                    // --hostname=camel-quarkus-http-apip-rh-prod.apps.jeannyil.sandbox430.opentlc.com \
                    // --port=proxy \
                    // -n 3scale-gw

                    echo "Run integration tests"
                    runIntegrationTests(service)
                    
                    echo "Promote to production"
                    service.promoteToProduction()

                }
            }
        }
    }
}

def runIntegrationTests(def service) {
    // To run the integration tests when using APIcast SaaS instances, we need
    // to fetch the proxy definition to extract the staging public url
    def proxy = service.readProxy("sandbox")

    // The integration tests will be a bit different depending on the security scheme
    // declared in the OpenAPI Specification file
    def getCredentialsCodeSnippet = null
    if (service.openapi.securityScheme.name() == "OPEN") {
        getCredentialsCodeSnippet = """
            credential_header="x-dummy: dummy"
            echo "no credential will be used"
        """
    } else if (service.openapi.securityScheme.name() == "APIKEY") {
        def userkey = service.applications[0].userkey
        getCredentialsCodeSnippet = """
            credential_header="api-key: ${userkey}"
            echo "userkey is ${userkey}"
        """
    } else if (service.openapi.securityScheme.name() == "OIDC") {
        def tokenEndpoint = getTokenEndpoint(params.OIDC_ISSUER_ENDPOINT)
        def clientId = service.applications[0].clientId
        def clientSecret = service.applications[0].clientSecret
        getCredentialsCodeSnippet = """
            echo "token endpoint is ${tokenEndpoint}"
            echo "client_id=${clientId}"
            echo "client_secret=${clientSecret}"
            curl -sfk "${tokenEndpoint}" -d client_id="${clientId}" -d client_secret="${clientSecret}" -d scope=openid -d grant_type=client_credentials -o response.json
            curl -sLfk https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /tmp/jq
            chmod 755 /tmp/jq
            TOKEN="\$(/tmp/jq -r .access_token response.json)"
            echo "Received access_token '\$TOKEN'"
            credential_header="Authorization: Bearer \$TOKEN"
        """
    }

    // Run the actual tests
    retry(5) {
        sh """
            set -e
            echo "Public Staging Base URL is ${proxy.sandbox_endpoint}"
            ${getCredentialsCodeSnippet}
            curl -sfk -w "GET /fruits: %{http_code}\n" -o /dev/null -X GET -H "Content-Type: application/json" -H "\$credential_header" "${proxy.sandbox_endpoint}/fruits"
            curl -sfk -w "GET /legumes: %{http_code}\n" -o /dev/null -X GET -H "Content-Type: application/json" -H "\$credential_header" "${proxy.sandbox_endpoint}/legumes"
        """
    }

}

def getTokenEndpoint(String oidcIssuerEndpoint) {
    def m = (oidcIssuerEndpoint =~ /(https?:\/\/)[^:]+:[^@]+@(.*)/)
    return "${m[0][1]}${m[0][2]}/protocol/openid-connect/token"
}

// Application plans from YAML files:
// [ artefactFile: params.BASIC_PLAN_YAML_FILE_PATH ],
// [ artefactFile: params.UNLIMITED_PLAN_YAML_FILE_PATH ]

// Application plans from inline:
// [ systemName: "fruits-and-legumes-api_basic_plan", name: "Basic", defaultPlan: true, published: true ],
// [ systemName: "fruits-and-legumes-api_unlimited_plan", name: "Unlimited", published: true ]

// Threescale Jenkins library conf
// privateBasePath               : "/",